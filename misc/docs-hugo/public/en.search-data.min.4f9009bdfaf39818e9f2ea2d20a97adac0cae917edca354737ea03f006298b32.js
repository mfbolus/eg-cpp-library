'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/eg-cpp-library/menu/','title':"Menu",'section':"Example C++ Library",'content':" Classes Namespaces Modules Files Pages Examples  "});index.add({'id':1,'href':'/eg-cpp-library/files/dir_4fef79e7177ba769987a8da36c892c5f/','title':"build",'section':"Files",'content':"build #  Directories #     Name     include     Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':2,'href':'/eg-cpp-library/classes/','title':"Classes",'section':"Example C++ Library",'content':"Classes #   namespace example An example namespace.  class LinearRegressionModel Linear Regression Model.     Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':3,'href':'/eg-cpp-library/files/dir_e5b5d92a17ead9a8b10414e7c30597b7/','title':"egcpp_h",'section':"Files",'content':"egcpp_h #  Files #     Name     egcpp_h/linear_regression_model.h declares and partially defines an example class type   egcpp_h/random_walk.h declares a random walk simulation     Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':4,'href':'/eg-cpp-library/files/linear__regression__model_8h/','title':"egcpp_h/linear_regression_model.h",'section':"Files",'content':"egcpp_h/linear_regression_model.h #  declares and partially defines an example class type More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Classes #      Name     class example::LinearRegressionModel Linear Regression Model.    Detailed Description #  declares and partially defines an example class type\nThis file declares and partially defines an example linear regression model class type.\nSource code #  //===-- egcpp_h/linear_regression_model.h - Model Class ---------*- C++ -*-===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #ifndef EGCPP_LINEAR_REGRESSION_MODEL_H #define EGCPP_LINEAR_REGRESSION_MODEL_H  // TODO(mfbolus): this is a fudge. I believe the include should never actually // be called, but it allows clangd to resolve these symbols. #ifndef EGCPP #include \u0026lt;egcpp\u0026gt;#endif  namespace example { class LinearRegressionModel { public: LinearRegressionModel(const arma::mat\u0026amp; x, const arma::mat\u0026amp; z); LinearRegressionModel(const arma::mat\u0026amp; C, const arma::vec\u0026amp; d, const arma::mat\u0026amp; R); // ~LinearRegressionModel();  auto C() const -\u0026gt; const arma::mat\u0026amp; { return C_; } auto d() const -\u0026gt; const arma::vec\u0026amp; { return d_; } auto R() const -\u0026gt; const arma::mat\u0026amp; { return R_; } auto simulate(const arma::mat\u0026amp; x, bool add_noise = false) -\u0026gt; arma::mat; const size_t n_x; const size_t n_y; private: arma::mat C_; arma::vec d_; arma::mat R_; }; } // namespace example  #endif  Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':5,'href':'/eg-cpp-library/files/random__walk_8h/','title':"egcpp_h/random_walk.h",'section':"Files",'content':"egcpp_h/random_walk.h #  declares a random walk simulation More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Detailed Description #  declares a random walk simulation\nThis file declares a random walk simulation.\nSource code #  //===-- egcpp_h/random_walk.h - Random Walk ---------------------*- C++ -*-===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #ifndef EGCPP_RANDOM_WALK_H #define EGCPP_RANDOM_WALK_H  // TODO(mfbolus): this is a fudge. I believe the include should never actually // be called, but it allows clangd to resolve these symbols. #ifndef EGCPP #include \u0026lt;egcpp\u0026gt;#endif  namespace example { auto random_walk(size_t n_t, const arma::mat\u0026amp; Q, arma::vec x0) -\u0026gt; arma::mat; } // namespace example  #endif  Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':6,'href':'/eg-cpp-library/namespaces/namespaceexample/','title':"example",'section':"Namespaces",'content':"example #  An example namespace. ## Classes\n    Name     class example::LinearRegressionModel Linear Regression Model.    Functions #      Name     auto random_walk(size_t n_t, const arma::mat \u0026amp; Q, arma::vec x0)simulates random walk    Functions Documentation #  function random_walk #  auto random_walk( size_t n_t, const arma::mat \u0026amp; Q, arma::vec x0 ) simulates random walk\nParameters:\n n_t number of time samples Q process noise covariance x0 initial value  Return: random variable\n Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':7,'href':'/eg-cpp-library/classes/classexample_1_1_linear_regression_model/','title':"example::LinearRegressionModel",'section':"Classes",'content':"example::LinearRegressionModel #  Linear Regression Model. #include \u0026lt;linear_regression_model.h\u0026gt;\nPublic Functions #      Name      LinearRegressionModel(const arma::mat \u0026amp; x, const arma::mat \u0026amp; z)Constructs and fits a new LinearRegressionModel.    LinearRegressionModel(const arma::mat \u0026amp; C, const arma::vec \u0026amp; d, const arma::mat \u0026amp; R)Constructs a new LinearRegressionModel.   auto C() constget output matrix (C)   auto d() constget output bias (d)   auto R() constget measurement noise covariance (R)   auto simulate(const arma::mat \u0026amp; x, bool add_noise =false)simulates linear regression model    Public Attributes #      Name     const size_t n_x number of input channels   const size_t n_y number of output channels    Public Functions Documentation #  function LinearRegressionModel #  LinearRegressionModel( const arma::mat \u0026amp; x, const arma::mat \u0026amp; z ) Constructs and fits a new LinearRegressionModel.\nParameters:\n x Input data [n_x x n_t] z Measured output data [n_y x n_t]  Given input/output data, constructs and fits a new Linear Regression Model:\ny = C*x + d\nz ~ N(y, R)\nfunction LinearRegressionModel #  LinearRegressionModel( const arma::mat \u0026amp; C, const arma::vec \u0026amp; d, const arma::mat \u0026amp; R ) Constructs a new LinearRegressionModel.\nParameters:\n C output matrix d output bias R measurement noise covariance  Constructs a new Linear Regression Model from parameters:\ny = C*x + d\nz ~ N(y, R)\nfunction C #  inline auto C() const get output matrix (C)\nfunction d #  inline auto d() const get output bias (d)\nfunction R #  inline auto R() const get measurement noise covariance (R)\nfunction simulate #  auto simulate( const arma::mat \u0026amp; x, bool add_noise =false ) simulates linear regression model\nParameters:\n x input data add_noise whether to add measurement noise  Return: model output\nPublic Attributes Documentation #  variable n_x #  const size_t n_x; number of input channels\nvariable n_y #  const size_t n_y; number of output channels\n Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':8,'href':'/eg-cpp-library/examples/','title':"Examples",'section':"Example C++ Library",'content':"Examples #   Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':9,'href':'/eg-cpp-library/files/','title':"Files",'section':"Example C++ Library",'content':"Files #   dir build  dir include  dir egcpp_h  file egcpp_h/linear_regression_model.h declares and partially defines an example class type file egcpp_h/random_walk.h declares a random walk simulation       dir src  file src/linear_regression_model.cpp defines an example class type file src/random_walk.cpp defines a random walk simulation     Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':10,'href':'/eg-cpp-library/files/dir_8f2980731aba7ec7b9fcae5764f196e3/','title':"include",'section':"Files",'content':"include #  Directories #     Name     egcpp_h     Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':11,'href':'/eg-cpp-library/modules/','title':"Modules",'section':"Example C++ Library",'content':"Modules #   Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':12,'href':'/eg-cpp-library/namespaces/','title':"Namespaces",'section':"Example C++ Library",'content':"Namespaces #   namespace example An example namespace.   Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':13,'href':'/eg-cpp-library/pages/','title':"Pages",'section':"Example C++ Library",'content':"Pages #   Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':14,'href':'/eg-cpp-library/files/dir_68267d1309a1af8e8297ef4c3efbcdba/','title':"src",'section':"Files",'content':"src #  Files #     Name     src/linear_regression_model.cpp defines an example class type   src/random_walk.cpp defines a random walk simulation     Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':15,'href':'/eg-cpp-library/files/linear__regression__model_8cpp/','title':"src/linear_regression_model.cpp",'section':"Files",'content':"src/linear_regression_model.cpp #  defines an example class type More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Detailed Description #  defines an example class type\nThis file defines an example linear regression model class type.\nSource code #  //===-- linear_regression_model.cpp - Model Class -------------------------===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #include \u0026lt;egcpp\u0026gt; namespace example { LinearRegressionModel::LinearRegressionModel(const arma::mat\u0026amp; x, const arma::mat\u0026amp; z) : n_x(x.n_rows), n_y(z.n_rows), C_(arma::mat(n_y, n_x, arma::fill::zeros)), d_(arma::vec(n_y, arma::fill::zeros)), R_(arma::mat(n_y, n_y, arma::fill::zeros)) { size_t n_t(x.n_cols); // number of time samples  // solve for C+d:  arma::mat sum_zx(n_y, n_x + 1, arma::fill::zeros); arma::vec x1(n_x + 1, arma::fill::zeros); x1[n_x] = 1.0; // covariance of input data  arma::mat sum_x1_x1(n_x + 1, n_x + 1, arma::fill::zeros); for (size_t t = 1; t \u0026lt; n_t; t++) { x1.subvec(0, n_x - 1) = x.col(t); sum_zx += z.col(t) * x1.t(); sum_x1_x1 += x1 * x1.t(); // if input x were *not* deterministic and had own covar, P  // sum_E_x1_x1.submat(0, 0, n_x - 1, n_x - 1) += P.slice(t);  } arma::mat Cd = sum_zx * arma::inv_sympd(sum_x1_x1); C_ = Cd.submat(0, 0, n_y - 1, n_x - 1); d_ = vectorise(Cd.submat(0, n_x, n_y - 1, n_x)); // Ghahgramani, Hinton 1996:  arma::mat sum_zz(n_y, n_y, arma::fill::zeros); arma::mat sum_yz(n_y, n_y, arma::fill::zeros); for (size_t t = 1; t \u0026lt; n_t; t++) { sum_zz += z.col(t) * z.col(t).t(); sum_yz += (C_ * x.col(t) + d_) * z.col(t).t(); } R_ = (sum_zz - sum_yz) / n_t; } LinearRegressionModel::LinearRegressionModel(const arma::mat\u0026amp; C, const arma::vec\u0026amp; d, const arma::mat\u0026amp; R) : n_x(C.n_cols), n_y(C.n_rows), C_(arma::mat(n_y, n_x, arma::fill::zeros)), d_(arma::vec(n_y, arma::fill::zeros)), R_(arma::mat(n_y, n_y, arma::fill::zeros)) { C_ = C; d_ = d; R_ = R; } auto LinearRegressionModel::simulate(const arma::mat\u0026amp; x, bool add_noise) -\u0026gt; arma::mat { size_t n_t(x.n_cols); // number of time samples  arma::mat y_hat(n_y, n_t); y_hat = C_ * x; y_hat.each_col() += d_; if (add_noise) { y_hat += arma::mvnrnd(arma::vec(n_y).fill(0), R_, n_t); } return y_hat; } } // namespace example  Updated on 25 February 2021 at 13:11:34 CST\n"});index.add({'id':16,'href':'/eg-cpp-library/files/random__walk_8cpp/','title':"src/random_walk.cpp",'section':"Files",'content':"src/random_walk.cpp #  defines a random walk simulation More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Detailed Description #  defines a random walk simulation\nThis file defines a random walk simulation.\nSource code #  //===-- random_walk.cpp - Random Walk -------------------------------------===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #include \u0026lt;egcpp\u0026gt; namespace example { auto random_walk(size_t n_t, const arma::mat\u0026amp; Q, arma::vec x0) -\u0026gt; arma::mat { size_t n_x = Q.n_rows; assert(n_x==Q.n_cols); arma::mat x(n_x, n_t, arma::fill::zeros); x.col(0) = x0; for (size_t t = 1; t \u0026lt; n_t; t++) { x.col(t) = x.col(t - 1) + arma::mvnrnd(arma::vec(n_x, arma::fill::zeros), Q); } return x; } } // namespace example  Updated on 25 February 2021 at 13:11:34 CST\n"});})();