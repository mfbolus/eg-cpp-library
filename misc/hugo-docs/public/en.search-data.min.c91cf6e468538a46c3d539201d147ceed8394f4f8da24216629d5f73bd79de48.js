'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/eg-cpp-library/docs/','title':"Example Documentation",'section':"Introduction",'content':"Example C++ Library Documentation #  "});index.add({'id':1,'href':'/eg-cpp-library/docs/model/','title':"Model",'section':"Example Documentation",'content':"Model Definition #  In this library, linear regression models take the following form:\n  \\[\\mathbf{y}_t = \\mathbf{C} \\mathbf{x}_{t} \u0026#43; \\mathbf{d}\\]   \\[\\mathbf{z}_t \\sim \\mathcal{N}\\left(\\mathbf{y}_t , \\mathbf{R} \\right)\\]  where  \\( \\mathbf{x}_{t} \\)  ,  \\( \\mathbf{y}_{t} \\)  , and  \\( \\mathbf{z}_{t} \\)  the input, output, and measurement, respectively;  \\( \\mathbf{C} \\)  is the output matrix;  \\( \\mathbf{d} \\)  is the output bias; and  \\( \\mathbf{R} \\)  is the covariance of the assumed Gaussian measurement noise.\n"});index.add({'id':2,'href':'/eg-cpp-library/docs/api/files/dir_4fef79e7177ba769987a8da36c892c5f/','title':"build",'section':"Files",'content':"build #  Directories #     Name     include     Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':3,'href':'/eg-cpp-library/docs/api/classes/','title':"Classes",'section':"Api",'content':"Classes #    example::LinearModel Linear Regression Model.\n  example::PoissonModel Poisson Model.\n   Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':4,'href':'/eg-cpp-library/docs/api/files/dir_e5b5d92a17ead9a8b10414e7c30597b7/','title':"egcpp_h",'section':"Files",'content':"egcpp_h #  Files #     Name     egcpp_h/linear_model.h declares and partially defines an example linear model class type   egcpp_h/poisson_model.h declares and partially defines an example Poisson class type   egcpp_h/random_walk.h declares a random walk simulation     Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':5,'href':'/eg-cpp-library/docs/api/files/linear__model_8h/','title':"egcpp_h/linear_model.h",'section':"Files",'content':"egcpp_h/linear_model.h #  declares and partially defines an example linear model class type More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Classes #      Name     class example::LinearModel Linear Regression Model.    Detailed Description #  This file declares and partially defines an example linear model class type.\nSource code #  //===-- egcpp_h/linear_model.h - Linear Model Class -------------*- C++ -*-===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #ifndef EGCPP_LINEAR_MODEL_H #define EGCPP_LINEAR_MODEL_H  // this is just here so clangd can resolve these symbols. #ifndef EGCPP #include \u0026lt;egcpp\u0026gt;#endif  namespace example { class LinearModel { public: LinearModel(const arma::mat\u0026amp; x, const arma::mat\u0026amp; z); LinearModel(const arma::mat\u0026amp; C, const arma::vec\u0026amp; d, const arma::mat\u0026amp; R); auto C() const -\u0026gt; const arma::mat\u0026amp; { return C_; } auto d() const -\u0026gt; const arma::vec\u0026amp; { return d_; } auto R() const -\u0026gt; const arma::mat\u0026amp; { return R_; } auto simulate(const arma::mat\u0026amp; x, bool add_noise = false) -\u0026gt; arma::mat; const size_t n_x; const size_t n_y; protected: arma::mat C_; arma::vec d_; private: arma::mat R_; }; } // namespace example  #endif  Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':6,'href':'/eg-cpp-library/docs/api/files/linear__regression__model_8h/','title':"egcpp_h/linear_regression_model.h",'section':"Files",'content':"egcpp_h/linear_regression_model.h #  declares and partially defines an example class type More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Classes #      Name     class example::LinearRegressionModel Linear Regression Model.    Detailed Description #  This file declares and partially defines an example linear regression model class type.\nSource code #  //===-- egcpp_h/linear_regression_model.h - Model Class ---------*- C++ -*-===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #ifndef EGCPP_LINEAR_REGRESSION_MODEL_H #define EGCPP_LINEAR_REGRESSION_MODEL_H  // TODO(mfbolus): this is a fudge. I believe the include should never actually // be called, but it allows clangd to resolve these symbols. #ifndef EGCPP #include \u0026lt;egcpp\u0026gt;#endif  namespace example { class LinearRegressionModel { public: LinearRegressionModel(const arma::mat\u0026amp; x, const arma::mat\u0026amp; z); LinearRegressionModel(const arma::mat\u0026amp; C, const arma::vec\u0026amp; d, const arma::mat\u0026amp; R); auto C() const -\u0026gt; const arma::mat\u0026amp; { return C_; } auto d() const -\u0026gt; const arma::vec\u0026amp; { return d_; } auto R() const -\u0026gt; const arma::mat\u0026amp; { return R_; } auto simulate(const arma::mat\u0026amp; x, bool add_noise = false) -\u0026gt; arma::mat; const size_t n_x; const size_t n_y; protected: arma::mat C_; arma::vec d_; private: arma::mat R_; }; } // namespace example  #endif  Updated on 26 February 2021 at 23:10:57 CST\n"});index.add({'id':7,'href':'/eg-cpp-library/docs/api/files/poisson__model_8h/','title':"egcpp_h/poisson_model.h",'section':"Files",'content':"egcpp_h/poisson_model.h #  declares and partially defines an example Poisson class type More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Classes #      Name     class example::PoissonModel Poisson Model.    Detailed Description #  This file declares and partially defines an example Poisson model class type.\nSource code #  //===-- egcpp_h/poisson_model.h - Poisson Model Class -----------*- C++ -*-===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #ifndef EGCPP_POISSON_MODEL_H #define EGCPP_POISSON_MODEL_H  #ifndef EGCPP #include \u0026lt;egcpp\u0026gt;#endif  namespace example { class PoissonModel: LinearModel { public: PoissonModel(const arma::mat\u0026amp; x, const arma::mat\u0026amp; z); PoissonModel(const arma::mat\u0026amp; C, const arma::vec\u0026amp; d); auto simulate(const arma::mat\u0026amp; x, bool add_noise = false) -\u0026gt; arma::mat; private: // Make this private.  using LinearModel::LinearModel; using LinearModel::R; }; } // namespace example  #endif  Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':8,'href':'/eg-cpp-library/docs/api/files/random__walk_8h/','title':"egcpp_h/random_walk.h",'section':"Files",'content':"egcpp_h/random_walk.h #  declares a random walk simulation More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Detailed Description #  This file declares a random walk simulation.\nSource code #  //===-- egcpp_h/random_walk.h - Random Walk ---------------------*- C++ -*-===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #ifndef EGCPP_RANDOM_WALK_H #define EGCPP_RANDOM_WALK_H  // TODO(mfbolus): this is a fudge. I believe the include should never actually // be called, but it allows clangd to resolve these symbols. #ifndef EGCPP #include \u0026lt;egcpp\u0026gt;#endif  namespace example { auto random_walk(size_t n_t, const arma::mat\u0026amp; Q, arma::vec x0) -\u0026gt; arma::mat; } // namespace example  #endif  Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':9,'href':'/eg-cpp-library/docs/api/namespaces/namespaceexample/','title':"example",'section':"Namespaces",'content':"example #  An example namespace. Classes #      Name     class example::LinearModel Linear Regression Model.   class example::PoissonModel Poisson Model.    Functions #      Name     auto random_walk(size_t n_t, const arma::mat \u0026amp; Q, arma::vec x0)\nsimulates random walk    Function Details #  random_walk #  auto random_walk( size_t n_t, const arma::mat \u0026amp; Q, arma::vec x0 ) Parameters:\n n_t number of time samples Q process noise covariance x0 initial value  Return: random variable\n Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':10,'href':'/eg-cpp-library/docs/api/classes/classexample_1_1_linear_model/','title':"example::LinearModel",'section':"Classes",'content':"example::LinearModel #  Linear Regression Model. #include \u0026lt;linear_model.h\u0026gt;\nInherited by example::PoissonModel\nPublic Functions #      Name      LinearModel(const arma::mat \u0026amp; x, const arma::mat \u0026amp; z)\nConstructs and fits a new LinearModel.    LinearModel(const arma::mat \u0026amp; C, const arma::vec \u0026amp; d, const arma::mat \u0026amp; R)\nConstructs a new LinearModel.   auto C() const\nget output matrix (C)   auto d() const\nget output bias (d)   auto R() const\nget measurement noise covariance (R)   auto simulate(const arma::mat \u0026amp; x, bool add_noise =false)\nsimulates linear model    Public Attributes #      Name     const size_t n_x number of input channels   const size_t n_y number of output channels    Protected Attributes #      Name     arma::mat C_ output matrix   arma::vec d_ output bias      Public Function Details #  LinearModel #  LinearModel( const arma::mat \u0026amp; x, const arma::mat \u0026amp; z ) Parameters:\n x Input data [n_x x n_t] z Measured output data [n_y x n_t]  Given input/output data, constructs and fits a new LinearModel:\n  \\[ \\mathbf{y}_t = \\mathbf{C} \\mathbf{x}_{t} \u0026#43; \\mathbf{d} \\]   \\[ \\mathbf{z}_t \\sim \\mathcal{N}\\left(\\mathbf{y}_t , \\mathbf{R} \\right) \\]  where  \\( \\mathbf{x}_{t} \\)  ,  \\( \\mathbf{y}_{t} \\)  , and  \\( \\mathbf{z}_{t} \\)  the input, output, and measurement, respectively;  \\( \\mathbf{C} \\)  is the output matrix;  \\( \\mathbf{d} \\)  is the output bias; and  \\( \\mathbf{R} \\)  is the covariance of the assumed Gaussian measurement noise.\n LinearModel #  LinearModel( const arma::mat \u0026amp; C, const arma::vec \u0026amp; d, const arma::mat \u0026amp; R ) Parameters:\n C output matrix d output bias R measurement noise covariance  Constructs a new LinearModel from parameters:\n \\[ \\mathbf{y}_t = \\mathbf{C} \\mathbf{x}_{t} \u0026#43; \\mathbf{d} \\]   \\[ \\mathbf{z}_t \\sim \\mathcal{N}\\left(\\mathbf{y}_t , \\mathbf{R} \\right) \\]  where  \\( \\mathbf{x}_{t} \\)  ,  \\( \\mathbf{y}_{t} \\)  , and  \\( \\mathbf{z}_{t} \\)  the input, output, and measurement, respectively;  \\( \\mathbf{C} \\)  is the output matrix;  \\( \\mathbf{d} \\)  is the output bias; and  \\( \\mathbf{R} \\)  is the covariance of the assumed Gaussian measurement noise.\n C #  inline auto C() const  d #  inline auto d() const  R #  inline auto R() const  simulate #  auto simulate( const arma::mat \u0026amp; x, bool add_noise =false ) Parameters:\n x input data add_noise whether to add measurement noise  Return: model output\n Public Attribute Details #  n_x #  const size_t n_x;  n_y #  const size_t n_y;  Protected Attribute Details #  **C_** #  arma::mat C_;  **d_** #  arma::vec d_;   Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':11,'href':'/eg-cpp-library/docs/api/classes/classexample_1_1_linear_regression_model/','title':"example::LinearRegressionModel",'section':"Classes",'content':"example::LinearRegressionModel #  Linear Regression Model. #include \u0026lt;linear_regression_model.h\u0026gt;\nPublic Functions #      Name      LinearRegressionModel(const arma::mat \u0026amp; x, const arma::mat \u0026amp; z)\nConstructs and fits a new LinearRegressionModel.    LinearRegressionModel(const arma::mat \u0026amp; C, const arma::vec \u0026amp; d, const arma::mat \u0026amp; R)\nConstructs a new LinearRegressionModel.   auto C() const\nget output matrix (C)   auto d() const\nget output bias (d)   auto R() const\nget measurement noise covariance (R)   auto simulate(const arma::mat \u0026amp; x, bool add_noise =false)\nsimulates linear regression model    Public Attributes #      Name     const size_t n_x number of input channels   const size_t n_y number of output channels    Protected Attributes #      Name     arma::mat C_ output matrix   arma::vec d_ output bias    Public Function Details #  LinearRegressionModel #  LinearRegressionModel( const arma::mat \u0026amp; x, const arma::mat \u0026amp; z ) Parameters:\n x Input data [n_x x n_t] z Measured output data [n_y x n_t]  Given input/output data, constructs and fits a new Linear Regression Model:\n  \\[ \\mathbf{y}_t = \\mathbf{C} \\mathbf{x}_{t} \u0026#43; \\mathbf{d} \\]   \\[ \\mathbf{z}_t \\sim \\mathcal{N}\\left(\\mathbf{y}_t , \\mathbf{R} \\right) \\]  where  \\( \\mathbf{x}_{t} \\)  ,  \\( \\mathbf{y}_{t} \\)  , and  \\( \\mathbf{z}_{t} \\)  the input, output, and measurement, respectively;  \\( \\mathbf{C} \\)  is the output matrix;  \\( \\mathbf{d} \\)  is the output bias; and  \\( \\mathbf{R} \\)  is the covariance of the assumed Gaussian measurement noise.\nLinearRegressionModel #  LinearRegressionModel( const arma::mat \u0026amp; C, const arma::vec \u0026amp; d, const arma::mat \u0026amp; R ) Parameters:\n C output matrix d output bias R measurement noise covariance  Constructs a new Linear Regression Model from parameters:\n \\[ \\mathbf{y}_t = \\mathbf{C} \\mathbf{x}_{t} \u0026#43; \\mathbf{d} \\]   \\[ \\mathbf{z}_t \\sim \\mathcal{N}\\left(\\mathbf{y}_t , \\mathbf{R} \\right) \\]  where  \\( \\mathbf{x}_{t} \\)  ,  \\( \\mathbf{y}_{t} \\)  , and  \\( \\mathbf{z}_{t} \\)  the input, output, and measurement, respectively;  \\( \\mathbf{C} \\)  is the output matrix;  \\( \\mathbf{d} \\)  is the output bias; and  \\( \\mathbf{R} \\)  is the covariance of the assumed Gaussian measurement noise.\nC #  inline auto C() const d #  inline auto d() const R #  inline auto R() const simulate #  auto simulate( const arma::mat \u0026amp; x, bool add_noise =false ) Parameters:\n x input data add_noise whether to add measurement noise  Return: model output\nPublic Attribute Details #  n_x #  const size_t n_x; n_y #  const size_t n_y; Protected Attribute Details #  **C_** #  arma::mat C_; **d_** #  arma::vec d_;  Updated on 26 February 2021 at 23:10:57 CST\n"});index.add({'id':12,'href':'/eg-cpp-library/docs/api/classes/classexample_1_1_poisson_model/','title':"example::PoissonModel",'section':"Classes",'content':"example::PoissonModel #  Poisson Model. #include \u0026lt;poisson_model.h\u0026gt;\nInherits from example::LinearModel\nPublic Functions #      Name      PoissonModel(const arma::mat \u0026amp; x, const arma::mat \u0026amp; z)\nConstructs and fits a new PoissonModel.    PoissonModel(const arma::mat \u0026amp; C, const arma::vec \u0026amp; d)\nConstructs a new PoissonModel.   auto simulate(const arma::mat \u0026amp; x, bool add_noise =false)\nsimulates Poisson model    Additional inherited members #  Public Functions inherited from example::LinearModel\n    Name     auto C() const\nget output matrix (C)   auto d() const\nget output bias (d)    Public Attributes inherited from example::LinearModel\n    Name     const size_t n_x number of input channels   const size_t n_y number of output channels    Protected Attributes inherited from example::LinearModel\n    Name     arma::mat C_ output matrix   arma::vec d_ output bias      Public Function Details #  PoissonModel #  PoissonModel( const arma::mat \u0026amp; x, const arma::mat \u0026amp; z ) Parameters:\n x Input data [n_x x n_t] z Measured output data [n_y x n_t]  Given input/output data, constructs and fits a new PoissonModel:\n  \\[ \\mathbf{y}_t = \\exp\\left(\\mathbf{C} \\mathbf{x}_{t} \u0026#43; \\mathbf{d}\\right) \\]   \\[ \\mathbf{z}_t \\sim \\mathcal{N}\\left(\\mathbf{y}_t , \\mathbf{R} \\right) \\]  where  \\( \\mathbf{x}_{t} \\)  ,  \\( \\mathbf{y}_{t} \\)  , and  \\( \\mathbf{z}_{t} \\)  the input, output, and measurement, respectively;  \\( \\mathbf{C} \\)  is the output matrix;  \\( \\mathbf{d} \\)  is the output bias; and  \\( \\mathbf{R} \\)  is the covariance of the assumed Gaussian measurement noise.\n PoissonModel #  PoissonModel( const arma::mat \u0026amp; C, const arma::vec \u0026amp; d ) Parameters:\n C output matrix d output bias  Constructs a new PoissonModel from parameters:\n \\[ \\mathbf{y}_t = \\exp \\left( \\mathbf{C} \\mathbf{x}_{t} \u0026#43; \\mathbf{d} \\right) \\]   \\[ \\mathbf{z}_t \\sim \\mathcal{N}\\left(\\mathbf{y}_t , \\mathbf{R} \\right) \\]  where  \\( \\mathbf{x}_{t} \\)  ,  \\( \\mathbf{y}_{t} \\)  , and  \\( \\mathbf{z}_{t} \\)  the input, output, and measurement, respectively;  \\( \\mathbf{C} \\)  is the output matrix;  \\( \\mathbf{d} \\)  is the output bias.\n simulate #  auto simulate( const arma::mat \u0026amp; x, bool add_noise =false ) Parameters:\n x input data add_noise whether to add measurement noise  Return: model output\n  Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':13,'href':'/eg-cpp-library/docs/api/examples/','title':"Examples",'section':"Api",'content':"Examples #   Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':14,'href':'/eg-cpp-library/docs/api/files/','title':"Files",'section':"Api",'content':"Files #    egcpp_h/linear_model.h declares and partially defines an example linear model class type\n  egcpp_h/poisson_model.h declares and partially defines an example Poisson class type\n  egcpp_h/random_walk.h declares a random walk simulation\n  src/linear_model.cpp defines an example linear model class type\n  src/poisson_model.cpp defines an example Poisson model class type\n  src/random_walk.cpp defines a random walk simulation\n   Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':15,'href':'/eg-cpp-library/docs/api/files/dir_8f2980731aba7ec7b9fcae5764f196e3/','title':"include",'section':"Files",'content':"include #  Directories #     Name     egcpp_h     Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':16,'href':'/eg-cpp-library/docs/api/modules/','title':"Modules",'section':"Api",'content':"Modules #   Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':17,'href':'/eg-cpp-library/docs/api/namespaces/','title':"Namespaces",'section':"Api",'content':"Namespaces #   example An example namespace.   Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':18,'href':'/eg-cpp-library/docs/api/pages/','title':"Pages",'section':"Api",'content':"Pages #   Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':19,'href':'/eg-cpp-library/docs/api/files/dir_68267d1309a1af8e8297ef4c3efbcdba/','title':"src",'section':"Files",'content':"src #  Files #     Name     src/linear_model.cpp defines an example linear model class type   src/poisson_model.cpp defines an example Poisson model class type   src/random_walk.cpp defines a random walk simulation     Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':20,'href':'/eg-cpp-library/docs/api/files/linear__model_8cpp/','title':"src/linear_model.cpp",'section':"Files",'content':"src/linear_model.cpp #  defines an example linear model class type More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Detailed Description #  This file defines an example linear model class type.\nSource code #  //===-- linear_model.cpp - Linear Model Class -----------------------------===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #include \u0026lt;egcpp\u0026gt; namespace example { LinearModel::LinearModel(const arma::mat\u0026amp; x, const arma::mat\u0026amp; z) : n_x(x.n_rows), n_y(z.n_rows), C_(arma::mat(n_y, n_x, arma::fill::zeros)), d_(arma::vec(n_y, arma::fill::zeros)), R_(arma::mat(n_y, n_y, arma::fill::zeros)) { size_t n_t(x.n_cols); // number of time samples  // solve for C+d:  arma::mat sum_zx(n_y, n_x + 1, arma::fill::zeros); arma::vec x1(n_x + 1, arma::fill::zeros); x1[n_x] = 1.0; // covariance of input data  arma::mat sum_x1_x1(n_x + 1, n_x + 1, arma::fill::zeros); for (size_t t = 1; t \u0026lt; n_t; t++) { x1.subvec(0, n_x - 1) = x.col(t); sum_zx += z.col(t) * x1.t(); sum_x1_x1 += x1 * x1.t(); // if input x were *not* deterministic and had own covar, P  // sum_E_x1_x1.submat(0, 0, n_x - 1, n_x - 1) += P.slice(t);  } arma::mat Cd = sum_zx * arma::inv_sympd(sum_x1_x1); C_ = Cd.submat(0, 0, n_y - 1, n_x - 1); d_ = vectorise(Cd.submat(0, n_x, n_y - 1, n_x)); // Ghahgramani, Hinton 1996:  arma::mat sum_zz(n_y, n_y, arma::fill::zeros); arma::mat sum_yz(n_y, n_y, arma::fill::zeros); for (size_t t = 1; t \u0026lt; n_t; t++) { sum_zz += z.col(t) * z.col(t).t(); sum_yz += (C_ * x.col(t) + d_) * z.col(t).t(); } R_ = (sum_zz - sum_yz) / n_t; } LinearModel::LinearModel(const arma::mat\u0026amp; C, const arma::vec\u0026amp; d, const arma::mat\u0026amp; R) : n_x(C.n_cols), n_y(C.n_rows), C_(arma::mat(n_y, n_x, arma::fill::zeros)), d_(arma::vec(n_y, arma::fill::zeros)), R_(arma::mat(n_y, n_y, arma::fill::zeros)) { C_ = C; d_ = d; R_ = R; } auto LinearModel::simulate(const arma::mat\u0026amp; x, bool add_noise) -\u0026gt; arma::mat { size_t n_t(x.n_cols); // number of time samples  arma::mat y_hat(n_y, n_t); y_hat = C_ * x; y_hat.each_col() += d_; if (add_noise) { y_hat += arma::mvnrnd(arma::vec(n_y).fill(0), R_, n_t); } return y_hat; } } // namespace example  Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':21,'href':'/eg-cpp-library/docs/api/files/poisson__model_8cpp/','title':"src/poisson_model.cpp",'section':"Files",'content':"src/poisson_model.cpp #  defines an example Poisson model class type More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Detailed Description #  This file defines an example Poisson model class type.\nSource code #  //===-- poisson_model.cpp - Poisson Model Class ---------------------------===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #include \u0026lt;egcpp\u0026gt; namespace example { PoissonModel::PoissonModel(const arma::mat\u0026amp; x, const arma::mat\u0026amp; z) : LinearModel(x, z) {} PoissonModel::PoissonModel(const arma::mat\u0026amp; C, const arma::vec\u0026amp; d) : LinearModel(C, d, arma::mat(d.n_elem, d.n_elem, arma::fill::zeros)) {} auto PoissonModel::simulate(const arma::mat\u0026amp; x, bool add_noise) -\u0026gt; arma::mat { size_t n_t(x.n_cols); // number of time samples  arma::mat y_hat(n_y, n_t); y_hat = C_ * x; y_hat.each_col() += d_; y_hat = arma::exp(y_hat); // exponential nonlinearity  if (add_noise) { for (size_t t = 0; t \u0026lt; n_t; t++) { arma::vec chance(n_y, arma::fill::randu); for (size_t p = 0; p \u0026lt; n_y; p++) { y_hat.col(t)[p] = (y_hat.col(t)[p] \u0026gt; chance[p]) ? 0.0 : 1.0; } } } return y_hat; } } // namespace example  Updated on 26 February 2021 at 23:25:30 CST\n"});index.add({'id':22,'href':'/eg-cpp-library/docs/api/files/random__walk_8cpp/','title':"src/random_walk.cpp",'section':"Files",'content':"src/random_walk.cpp #  defines a random walk simulation More\u0026hellip;\nNamespaces #     Name     example An example namespace.    Detailed Description #  This file defines a random walk simulation.\nSource code #  //===-- random_walk.cpp - Random Walk -------------------------------------===// // // Copyright 2021 Michael Bolus // // Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // //===----------------------------------------------------------------------===// //===----------------------------------------------------------------------===//  #include \u0026lt;egcpp\u0026gt; namespace example { auto random_walk(size_t n_t, const arma::mat\u0026amp; Q, arma::vec x0) -\u0026gt; arma::mat { size_t n_x = Q.n_rows; if ((n_x != Q.n_cols) || (Q.n_cols != Q.n_rows)) { throw std::logic_error(\u0026#34;Q must be `n_x` x `n_x`.\u0026#34;); } arma::mat x(n_x, n_t, arma::fill::zeros); x.col(0) = x0; for (size_t t = 1; t \u0026lt; n_t; t++) { x.col(t) = x.col(t - 1) + arma::mvnrnd(arma::vec(n_x, arma::fill::zeros), Q); } return x; } } // namespace example  Updated on 26 February 2021 at 23:25:30 CST\n"});})();